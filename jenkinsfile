pipeline {
    agent any
    tools {
        nodejs 'NodeJS-20' // Matches Node.js 20.x (configured in Jenkins Global Tool Configuration)
    }
    environment {
        // Inject sensitive credentials from Jenkins
        MONGO_URI = credentials('mongo-uri')
        JWT_SECRET = credentials('jwt-secret')
        LIBRETRANSLATE_API_KEY = credentials('libretranslate-api-key')
        TWILIO_ACCOUNT_SID = credentials('twilio-account-sid')
        TWILIO_AUTH_TOKEN = credentials('twilio-auth-token')
        REACT_APP_API_URL = credentials('react-app-api-url')
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the Halim branch (or main)
                git branch: 'Halim', url: 'https://github.com/your-repo/InnoDevolopers.git'
            }
        }
        stage('Install System Dependencies') {
            steps {
                // Install dependencies for @tensorflow/tfjs, etc.
                sh 'sudo apt-get update'
                sh 'sudo apt-get install -y python3 build-essential'
            }
        }
        stage('Install Backend Dependencies') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }
        stage('Install Frontend Dependencies') {
            steps {
                dir('client') {
                    sh 'npm install'
                }
            }
        }
        stage('Unit Test Backend') {
            steps {
                dir('server') {
                    // Allow tests to pass if not implemented
                    sh 'npm test || true'
                }
            }
        }
        stage('Unit Test Frontend') {
            steps {
                dir('client') {
                    // Allow tests to pass if not implemented
                    sh 'npm test || true'
                }
            }
        }
        stage('Build Frontend') {
            steps {
                dir('client') {
                    sh 'npm run build-dev'
                }
            }
        }
        // Optional: Add deployment stage
        // stage('Deploy') {
        //     steps {
        //         // Add deployment commands (e.g., to Heroku, AWS, Vercel)
        //     }
        // }
    }
    post {
        always {
            // Clean up workspace to save space
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}